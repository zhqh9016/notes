package com.taikang.dic.ltci.evaluate.nursing.serviceClient;

import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.taikang.dic.ltci.portal.api.model.EvaluateTaskDTO;
import com.taikang.dic.ltci.portal.api.model.RestResponseDTO;

@FeignClient(name = "${feign.evaluate.nursing.client}", url = "${feign.evaluate.nursing.url}")
public interface EvaluateTaskServerClient {
  /**
   * 评估任务新增
   *
   * @param evaluateTaskDTO
   * @param systemCode
   * @return
   */
  @RequestMapping(method = RequestMethod.POST, value = "/api/v1/evaluateTask")
  RestResponseDTO expertTaskAdd(
      @RequestBody EvaluateTaskDTO evaluateTaskDTO,
      @RequestParam(value = "systemCode") String systemCode);
  /**
   * 评估任务分页查询
   *
   * @param evaluateTaskDTOParam
   * @param page
   * @param pageSize
   * @param systemCode
   * @return
   */
  @RequestMapping(method = RequestMethod.POST, value = "/api/v1/evaluateTasks")
  public RestResponseDTO evaluateTaskList(
      @RequestBody EvaluateTaskDTO evaluateTaskDTOParam,
      @RequestParam(value = "page") int page,
      @RequestParam(value = "pageSize") int pageSize,
      @RequestParam(value = "systemCode") String systemCode);

  @RequestMapping(value = "/api/v1/evaluateTask", method = RequestMethod.PUT)
  public RestResponseDTO sendEvaluateTask(
      @RequestParam(value = "evaluateTaskCodes") String evaluateTaskCodes,
      @RequestParam(value = "operatedBy") String operatedBy,
      @RequestParam(value = "operatedOrg") String operatedOrg,
      @RequestParam(value = "evaluateAgencyCode") String evaluateAgencyCode,
      @RequestParam(value = "evaluateAgencyName") String evaluateAgencyName,
      @RequestParam(value = "systemCode") String systemCode);

  @RequestMapping(value = "/api/v1/reviewEvaluateTask", method = RequestMethod.PUT)
  RestResponseDTO reviewEvaluateTask(
      @RequestParam(value = "evaluateTaskCode") String evaluateTaskCode,
      @RequestParam(value = "reevalueateResult") String reevalueateResult,
      @RequestParam(value = "operatedBy") String operatedBy,
      @RequestParam(value = "operatedOrg") String operatedOrg,
      @RequestParam(value = "systemCode") String systemCode);

  /**
   * 批量修改评估任务送达状态
   *
   * @param taskState
   * @param operatedBy
   * @param evaluateTaskCodes
   * @param systemCode
   * @return
   */
  @RequestMapping(
    method = RequestMethod.PUT,
    value = "/api/v1//evaluateTaskStauts/{taskState}/{operatedBy}/{operatedOrg}/{evaluateTaskCodes}"
  )
  RestResponseDTO batchTreatmentApplicationCase(
      @RequestParam(value = "taskState") String taskState,
      @RequestParam(value = "operatedBy") String operatedBy,
      @RequestParam(value = "operatedOrg") String operatedOrg,
      @RequestParam(value = "evaluateTaskCodes") String evaluateTaskCodes,
      @RequestParam(value = "systemCode") String systemCode);

  /**
   * 根据评估任务code获取详情信息
   *
   * @param evaluateTaskCode
   * @param systemCode
   * @return
   */
  @RequestMapping(method = RequestMethod.GET, value = "/api/v1/evaluateTask/{evaluateTaskCode}")
  RestResponseDTO getEvaluateTask(
      @PathVariable(value = "evaluateTaskCode") String evaluateTaskCode,
      @RequestParam(value = "systemCode") String systemCode);

  @RequestMapping(method = RequestMethod.POST, value = "/api/v1/evaluateTask/sendMessage")
  RestResponseDTO getExpertTaskList(
      @RequestParam(value = "insuredPersonName") String insuredPersonName,
      @RequestParam(value = "idCard") String idCard,
      @RequestParam(value = "evaluateOrg") String evaluateOrg,
      @RequestParam(value = "operatedTime") String operatedTime,
      @RequestParam(value = "taskState") String taskState,
      @RequestParam(value = "page") int page,
      @RequestParam(value = "pageSize") int pageSize);

  @RequestMapping(method = RequestMethod.POST, value = "/api/v1/evaluateTask/mongoDBMessage")
  RestResponseDTO getMongoDBMessage(@RequestParam(value = "id") String id);

  @RequestMapping(value = "/api/v1/toDoListEvaluateTaskList", method = RequestMethod.GET)
  RestResponseDTO getToDoListEvaluateTaskList();
}
